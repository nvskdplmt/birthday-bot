import os
import logging
from datetime import datetime
from telegram import Update, Bot, ReplyKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackContext, MessageHandler, Filters
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger
from dotenv import load_dotenv
from pytz import timezone
from keep_alive import keep_alive

load_dotenv()
TOKEN = os.getenv("TOKEN")
scheduler = BackgroundScheduler()

daily_data = {
    1: {"fact": "1 –∏—é–Ω—è ‚Äî –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –¥–µ–Ω—å –∑–∞—â–∏—Ç—ã –¥–µ—Ç–µ–π üåçüë∂"},
    2: {"fact": "2 –∏—é–Ω—è 1953 ‚Äî –∫–æ—Ä–æ–Ω–∞—Ü–∏—è –∫–æ—Ä–æ–ª–µ–≤—ã –ï–ª–∏–∑–∞–≤–µ—Ç—ã II üëë"},
    3: {"fact": "3 –∏—é–Ω—è 1965 ‚Äî –ø–µ—Ä–≤—ã–π –≤—ã—Ö–æ–¥ –∞–º–µ—Ä–∏–∫–∞–Ω—Ü–∞ –≤ –æ—Ç–∫—Ä—ã—Ç—ã–π –∫–æ—Å–º–æ—Å üöÄ"},
    4: {"fact": "4 –∏—é–Ω—è ‚Äî –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –ê–Ω–≥–µ–ª—ã –ú–µ—Ä–∫–µ–ª—å üá©üá™"},
    5: {"fact": "5 –∏—é–Ω—è ‚Äî –í—Å–µ–º–∏—Ä–Ω—ã–π –¥–µ–Ω—å –æ—Ö—Ä–∞–Ω—ã –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã üå±"},
    6: {"fact": "6 –∏—é–Ω—è ‚Äî –ü—É—à–∫–∏–Ω—Å–∫–∏–π –¥–µ–Ω—å –†–æ—Å—Å–∏–∏ ‚úçÔ∏è"},
    7: {"fact": "7 –∏—é–Ω—è 1494 ‚Äî –ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ –¢–æ—Ä–¥–µ—Å–∏–ª—å—è—Å—Å–∫–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞ üó∫Ô∏è"},
    8: {"fact": "8 –∏—é–Ω—è ‚Äî –í—Å–µ–º–∏—Ä–Ω—ã–π –¥–µ–Ω—å –æ–∫–µ–∞–Ω–æ–≤ üåä"},
    9: {"fact": "9 –∏—é–Ω—è ‚Äî –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –¥–µ–Ω—å –¥—Ä—É–∑–µ–π ü§ù"},
    10: {"fact": "10 –∏—é–Ω—è 1829 ‚Äî –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —Ö–∏–º–∏–∫–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ë—É—Ç–ª–µ—Ä–æ–≤–∞ ‚öóÔ∏è"},
    11: {"fact": "11 –∏—é–Ω—è ‚Äî –î–µ–Ω—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –≤ –†–æ—Å—Å–∏–∏ üèõÔ∏è"},
    12: {"fact": "12 –∏—é–Ω—è ‚Äî –î–µ–Ω—å –†–æ—Å—Å–∏–∏ üá∑üá∫"},
    13: {"fact": "13 –∏—é–Ω—è 1895 ‚Äî –æ—Ç–∫—Ä—ã—Ç–∏–µ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä–∫–∞ –ë–∞–Ω—Ñ –≤ –ö–∞–Ω–∞–¥–µ üèûÔ∏è"},
    14: {"fact": "14 –∏—é–Ω—è ‚Äî –í—Å–µ–º–∏—Ä–Ω—ã–π –¥–µ–Ω—å –¥–æ–Ω–æ—Ä–∞ –∫—Ä–æ–≤–∏ üíâ"},
    15: {"fact": "15 –∏—é–Ω—è 1215 ‚Äî –ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ –í–µ–ª–∏–∫–æ–π —Ö–∞—Ä—Ç–∏–∏ –≤–æ–ª—å–Ω–æ—Å—Ç–µ–π üìú"},
    16: {"fact": "16 –∏—é–Ω—è 1963 ‚Äî –ø–µ—Ä–≤–∞—è –∂–µ–Ω—â–∏–Ω–∞ –≤ –∫–æ—Å–º–æ—Å–µ –í–∞–ª–µ–Ω—Ç–∏–Ω–∞ –¢–µ—Ä–µ—à–∫–æ–≤–∞ üë©‚ÄçüöÄ"},
    17: {"fact": "17 –∏—é–Ω—è ‚Äî –í—Å–µ–º–∏—Ä–Ω—ã–π –¥–µ–Ω—å –±–æ—Ä—å–±—ã —Å –æ–ø—É—Å—Ç—ã–Ω–∏–≤–∞–Ω–∏–µ–º üåµ"},
    18: {"fact": "18 –∏—é–Ω—è ‚Äî –î–µ–Ω—å —É—Å—Ç–æ–π—á–∏–≤–æ–π –≥–∞—Å—Ç—Ä–æ–Ω–æ–º–∏–∏ üåΩ"},
    19: {"fact": "19 –∏—é–Ω—è ‚Äî –î–µ–Ω—å —Å–æ–∑–¥–∞–Ω–∏—è –í–µ–Ω—ã –∫–∞–∫ –≥–æ—Ä–æ–¥–∞ üèôÔ∏è"},
    20: {"fact": "20 –∏—é–Ω—è ‚Äî –í—Å–µ–º–∏—Ä–Ω—ã–π –¥–µ–Ω—å –±–µ–∂–µ–Ω—Ü–µ–≤ üåç"},
    21: {"fact": "21 –∏—é–Ω—è ‚Äî –ª–µ—Ç–Ω–µ–µ —Å–æ–ª–Ω—Ü–µ—Å—Ç–æ—è–Ω–∏–µ, —Å–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π –¥–µ–Ω—å –≤ –≥–æ–¥—É ‚òÄÔ∏è"},
    22: {"fact": "üéâ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –î–∞–Ω–∏–ª–∞! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –µ–≥–æ! üéÇüéà"},
}

def send_birthday_countdown(bot: Bot, chat_id: int):
    today = datetime.now().date()
    bday = datetime(2025, 6, 22).date()
    if today.month == 6 and 1 <= today.day <= 22:
        days_left = (bday - today).days
        data = daily_data.get(today.day)
        if data:
            text = data["fact"] if days_left == 0 else f"–î–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –î–∞–Ω–∏–ª–∞ –æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π!\n\n{data['fact']}"
            bot.send_message(chat_id=chat_id, text=text)

def start(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    user = update.effective_user.first_name or "–¥—Ä—É–≥"
    keyboard = [["üìÜ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π"], ["üéÅ –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç"], ["‚õî –°—Ç–æ–ø"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    update.message.reply_text(f"üëã –ü—Ä–∏–≤–µ—Ç, {user}! –Ø –±—É–¥—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –î–∞–Ω–∏–ª–∞ üéâ", reply_markup=reply_markup)
    job_id = f"bday_{chat_id}"
    if scheduler.get_job(job_id):
        update.message.reply_text("üîÅ –£–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ!")
        return
    scheduler.add_job(
        send_birthday_countdown,
        trigger=CronTrigger(hour=12, minute=0, timezone=timezone("Europe/Moscow")),
        args=[context.bot, chat_id],
        id=job_id,
        replace_existing=True
    )
    update.message.reply_text("‚úÖ –Ø –±—É–¥—É –ø–∏—Å–∞—Ç—å —Ç–µ–±–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 12:00!")

def stop(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    job_id = f"bday_{chat_id}"
    if scheduler.get_job(job_id):
        scheduler.remove_job(job_id)
        update.message.reply_text("‚õî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.")
    else:
        update.message.reply_text("üì• –£ —Ç–µ–±—è –∏ —Ç–∞–∫ –Ω–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")

def days_left(update: Update, context: CallbackContext):
    today = datetime.now().date()
    bday = datetime(2025, 6, 22).date()
    days = (bday - today).days
    if today > bday:
        update.message.reply_text("üéâ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É–∂–µ –ø—Ä–æ—à—ë–ª!")
    elif days == 0:
        update.message.reply_text("üéÇ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –î–∞–Ω–∏–ª–∞!")
    else:
        update.message.reply_text(f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å {days} –¥–Ω–µ–π –¥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –î–∞–Ω–∏–ª–∞.")

def fact(update: Update, context: CallbackContext):
    today = datetime.now().date()
    data = daily_data.get(today.day)
    if data:
        update.message.reply_text(data["fact"])
    else:
        update.message.reply_text("üòû –°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ —Ñ–∞–∫—Ç–∞.")

def handle_buttons(update: Update, context: CallbackContext):
    text = update.message.text
    if text == "üìÜ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π":
        days_left(update, context)
    elif text == "üéÅ –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç":
        fact(update, context)
    elif text == "‚õî –°—Ç–æ–ø":
        stop(update, context)

def main():
    logging.basicConfig(level=logging.INFO)
    updater = Updater(token=TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("stop", stop))
    dp.add_handler(CommandHandler("days", days_left))
    dp.add_handler(CommandHandler("fact", fact))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_buttons))

    updater.bot.set_my_commands([
        ("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"),
        ("stop", "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"),
        ("days", "–°–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π"),
        ("fact", "–§–∞–∫—Ç –¥–Ω—è")
    ])

    scheduler.start()
    keep_alive()
    updater.start_polling()
    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    updater.idle()

if __name__ == '__main__':
    main()
